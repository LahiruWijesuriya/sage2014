import numpy as np
cimport numpy as np
import matplotlib.pyplot as plt

cdef class cranknicC:
    
    cdef double h, k
    cdef int xlen, r, s
    cdef public np.ndarray t_range, x_range, ic   
    
    def __init__(self,t_range,x_range,ic):
        
        self.t_range = t_range
        self.x_range = x_range
        self.ic = ic
    
        if len(x_range) != len(ic):
           raise Exception('Initial conditions and x_range do not match')
            
    def crankC(self,coeffs):
        
        #Grab step sizes
        k = self.t_range[1] - self.t_range[0]
        h = self.x_range[1] - self.x_range[0]
        
        #grab x length
        xlen = len(self.x_range)
        
        #grab coeffs
        A = coeffs[0]
        B = coeffs[1]
        C = coeffs[2]
        D1 = coeffs[3]
        D2 = coeffs[4]
        D3 = coeffs[5]
        
        #Pre-define matrices#####################################
        self.ic = np.array(self.ic, np.float)
        leftcoeff = np.zeros((xlen,xlen),np.float)
        rightcoeff = np.zeros((xlen,xlen),np.float)
        d = np.zeros((xlen,1),np.float)
        sol = np.zeros((xlen,1),np.float)
           
        #populate first column of solution with ICs
        for i in range(xlen):
            sol[i] = self.ic[i]
        
        #populate the leftside coeff matrix
        leftcoeff[0][0] = B
        leftcoeff[0][1] = C
        r = xlen-1
        for i in range(1,r):
            leftcoeff[i][i] = B
            leftcoeff[i][i-1] = A
            leftcoeff[i][i+1] = C
        leftcoeff[r][r-1] = A
        leftcoeff[r][r] = B
            
        #populate rightside coeff matrix, make things negative
        rightcoeff[0][0] = -D2
        rightcoeff[0][1] = -D3
        s = xlen-1
        for j in range(1,s):
            rightcoeff[j][j] = -D2
            rightcoeff[j][j-1] = -D1
            rightcoeff[j][j+1] = -D3
        rightcoeff[s][s-1] = -D1
        rightcoeff[s][s] = -D2
            
        #Thomas Algorithm wants a, b, c
        #predefine these
        
        a = [leftcoeff[i][j] for i in range(xlen) for j in range(xlen) if i == j+1]
        b = [leftcoeff[i][j] for i in range(xlen) for j in range(xlen) if i == j]
        c = [leftcoeff[i][j] for i in range(xlen) for j in range(xlen) if i == j-1]
        
        d = np.dot(rightcoeff,self.ic)
        
        #using LU decomp in numpy
        #nextsol = linalg.solve(leftcoeff, d)
        #print 'linalg sol',nextsol
        
        #using the Thomas Algo
        nextsol = self.thomas(a,b,c,d)
        #print 'thomas sol',test
        
        #add solution to solution matrix
        sol = np.append(sol,nextsol, axis=1)
        
        #replace d with nextsol
        
        #--------------> Begin loop
        for k in range(1,len(self.t_range)-1):
            
            d = np.dot(rightcoeff,nextsol)
            #nextsol = linalg.solve(leftcoeff,d)
            nextsol = self.thomas(a,b,c,d)
            sol = np.append(sol,nextsol,axis=1)
            
        #--------------> End loop?
        
        return sol
        
    def thomas(self,a,b,c,d):
        cdef int n
        n = len(d) - 1 
        c[0] /= b[0]
        d[0] /= b[0]
        for i in range(1, n): 
            c[i] /= b[i] - a[i] * c[i-1]
            d[i] = (d[i] - a[i] * d[i-1]) / (b[i] - a[i] * c[i-1])
        
        #Final interation, one past where c stops.
        d[n] = (d[n] - a[n-1] * d[n-1]) / (b[n] - a[n-1] * c[n-1])
        
        #Backwards substitution for solution.
        for i in reversed(range(n)):
            d[i] = d[i] - c[i] * d[i+1]
            
        return d
        
